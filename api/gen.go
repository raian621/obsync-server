// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Cookie_authScopes = "cookie_auth.Scopes"
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	Active *bool   `json:"active,omitempty"`
	Id     *int64  `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// File defines model for File.
type File struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Etag md5 hash of the file
	Etag      *string    `json:"etag,omitempty"`
	Filename  *string    `json:"filename,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// User defines model for User.
type User struct {
	Email    string `json:"email"`
	Id       *int64 `json:"id,omitempty"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// FileList defines model for FileList.
type FileList = []File

// GetApikeysParams defines parameters for GetApikeys.
type GetApikeysParams struct {
	// Name Name of the API key
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetFilesFilenameParams defines parameters for GetFilesFilename.
type GetFilesFilenameParams struct {
	// IfNoneMatch MD5 hash used to detect whether a file is already downloaded locally
	IfNoneMatch *string `json:"If-None-Match,omitempty"`
}

// PutFilesFilenameParams defines parameters for PutFilesFilename.
type PutFilesFilenameParams struct {
	// IfNoneMatch MD5 hash used to detect whether a file is already downloaded locally
	IfNoneMatch *string `json:"If-None-Match,omitempty"`
}

// PutUserEmailJSONBody defines parameters for PutUserEmail.
type PutUserEmailJSONBody = string

// PostUserLoginJSONBody defines parameters for PostUserLogin.
type PostUserLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PutUserPasswordJSONBody defines parameters for PutUserPassword.
type PutUserPasswordJSONBody = string

// PutUserUsernameJSONBody defines parameters for PutUserUsername.
type PutUserUsernameJSONBody = string

// PostApikeysJSONRequestBody defines body for PostApikeys for application/json ContentType.
type PostApikeysJSONRequestBody = ApiKey

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = User

// PutUserEmailJSONRequestBody defines body for PutUserEmail for application/json ContentType.
type PutUserEmailJSONRequestBody = PutUserEmailJSONBody

// PostUserLoginJSONRequestBody defines body for PostUserLogin for application/json ContentType.
type PostUserLoginJSONRequestBody PostUserLoginJSONBody

// PutUserPasswordJSONRequestBody defines body for PutUserPassword for application/json ContentType.
type PutUserPasswordJSONRequestBody = PutUserPasswordJSONBody

// PutUserUsernameJSONRequestBody defines body for PutUserUsername for application/json ContentType.
type PutUserUsernameJSONRequestBody = PutUserUsernameJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete an API key
	// (DELETE /apikeys)
	DeleteApikeys(ctx echo.Context) error
	// Get API key info
	// (GET /apikeys)
	GetApikeys(ctx echo.Context, params GetApikeysParams) error
	// Create an API key
	// (POST /apikeys)
	PostApikeys(ctx echo.Context) error
	// Get the Redoc OpenAPI documentation page
	// (GET /docs)
	GetDocs(ctx echo.Context) error
	// Delete a file on the sync server
	// (DELETE /files/{filename})
	DeleteFilesFilename(ctx echo.Context, filename string) error
	// Download a file from the sync server
	// (GET /files/{filename})
	GetFilesFilename(ctx echo.Context, filename string, params GetFilesFilenameParams) error
	// Upload a file to the sync server
	// (POST /files/{filename})
	PostFilesFilename(ctx echo.Context, filename string) error
	// Update a file on the sync server
	// (PUT /files/{filename})
	PutFilesFilename(ctx echo.Context, filename string, params PutFilesFilenameParams) error
	// Get a list of files that are synced to the server
	// (GET /list-files)
	GetListFiles(ctx echo.Context) error
	// Get the OpenAPI spec in YAML format
	// (GET /openapi.yaml)
	GetOpenapiYaml(ctx echo.Context) error
	// Get the Redoc script that's stored locally on the server
	// (GET /redoc.standalone.js)
	GetRedocStandaloneJs(ctx echo.Context) error
	// Delete a user
	// (DELETE /user)
	DeleteUser(ctx echo.Context) error
	// Create a user
	// (POST /user)
	PostUser(ctx echo.Context) error
	// Let users update their email
	// (PUT /user/email)
	PutUserEmail(ctx echo.Context) error
	// Log in a user
	// (POST /user/login)
	PostUserLogin(ctx echo.Context) error
	// Log out a user
	// (POST /user/logout)
	PostUserLogout(ctx echo.Context) error
	// Let users update their password
	// (PUT /user/password)
	PutUserPassword(ctx echo.Context) error
	// Let users update their username
	// (PUT /user/username)
	PutUserUsername(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteApikeys converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApikeys(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApikeys(ctx)
	return err
}

// GetApikeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetApikeys(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApikeysParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApikeys(ctx, params)
	return err
}

// PostApikeys converts echo context to params.
func (w *ServerInterfaceWrapper) PostApikeys(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApikeys(ctx)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// DeleteFilesFilename converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFilesFilename(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", ctx.Param("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	ctx.Set(Cookie_authScopes, []string{})

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFilesFilename(ctx, filename)
	return err
}

// GetFilesFilename converts echo context to params.
func (w *ServerInterfaceWrapper) GetFilesFilename(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", ctx.Param("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	ctx.Set(Cookie_authScopes, []string{})

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFilesFilenameParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-None-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-None-Match: %s", err))
		}

		params.IfNoneMatch = &IfNoneMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFilesFilename(ctx, filename, params)
	return err
}

// PostFilesFilename converts echo context to params.
func (w *ServerInterfaceWrapper) PostFilesFilename(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", ctx.Param("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	ctx.Set(Cookie_authScopes, []string{})

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFilesFilename(ctx, filename)
	return err
}

// PutFilesFilename converts echo context to params.
func (w *ServerInterfaceWrapper) PutFilesFilename(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", ctx.Param("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	ctx.Set(Cookie_authScopes, []string{})

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutFilesFilenameParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-None-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-None-Match: %s", err))
		}

		params.IfNoneMatch = &IfNoneMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutFilesFilename(ctx, filename, params)
	return err
}

// GetListFiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetListFiles(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListFiles(ctx)
	return err
}

// GetOpenapiYaml converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiYaml(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenapiYaml(ctx)
	return err
}

// GetRedocStandaloneJs converts echo context to params.
func (w *ServerInterfaceWrapper) GetRedocStandaloneJs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRedocStandaloneJs(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// PutUserEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUserEmail(ctx)
	return err
}

// PostUserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUserLogin(ctx)
	return err
}

// PostUserLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserLogout(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUserLogout(ctx)
	return err
}

// PutUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserPassword(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUserPassword(ctx)
	return err
}

// PutUserUsername converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserUsername(ctx echo.Context) error {
	var err error

	ctx.Set(Cookie_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUserUsername(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/apikeys", wrapper.DeleteApikeys)
	router.GET(baseURL+"/apikeys", wrapper.GetApikeys)
	router.POST(baseURL+"/apikeys", wrapper.PostApikeys)
	router.GET(baseURL+"/docs", wrapper.GetDocs)
	router.DELETE(baseURL+"/files/:filename", wrapper.DeleteFilesFilename)
	router.GET(baseURL+"/files/:filename", wrapper.GetFilesFilename)
	router.POST(baseURL+"/files/:filename", wrapper.PostFilesFilename)
	router.PUT(baseURL+"/files/:filename", wrapper.PutFilesFilename)
	router.GET(baseURL+"/list-files", wrapper.GetListFiles)
	router.GET(baseURL+"/openapi.yaml", wrapper.GetOpenapiYaml)
	router.GET(baseURL+"/redoc.standalone.js", wrapper.GetRedocStandaloneJs)
	router.DELETE(baseURL+"/user", wrapper.DeleteUser)
	router.POST(baseURL+"/user", wrapper.PostUser)
	router.PUT(baseURL+"/user/email", wrapper.PutUserEmail)
	router.POST(baseURL+"/user/login", wrapper.PostUserLogin)
	router.POST(baseURL+"/user/logout", wrapper.PostUserLogout)
	router.PUT(baseURL+"/user/password", wrapper.PutUserPassword)
	router.PUT(baseURL+"/user/username", wrapper.PutUserUsername)

}
